# return True if there exists a subarray with sum 0, else return False
# Time Complexity: O(n), Space Complexity: O(n)
# Approach: Use a set to store the prefix sum. If the prefix sum is already in the set, return True. If the prefix sum is 0, return True. If the current element is 0, return True.
class Solution:
    def findSubArray(self, arr):
        n = len(arr)
        curr_sum = 0
        s = set()
        for i in range(n):
            curr_sum += arr[i]
            if arr[i] == 0 or curr_sum == 0:
                return True
            elif curr_sum not in s:
                s.add(curr_sum)
            else:
                return True
        return False
            
        



 
if __name__ == "__main__":
   ob = Solution()
   ans = ob.findSubArray([-1,3])
   print(ans)

# [4,2,-3,1,7], [4,2,-3,1], [4,2,-3], [4,2], [4], [2,-3,1,7], [2,-3,1], [2,-3], [2], [-3,1,7], [-3,1], [-3], [1,7], [1], [7]